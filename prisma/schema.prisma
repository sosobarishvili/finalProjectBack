datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(cuid())
  email        String?   @unique
  name         String?
  avatarUrl    String?
  isAdmin      Boolean   @default(false)
  isBlocked    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt DateTime?
  accounts     Account[]
  inventories  Inventory[]
  permissions  AccessPermission[]
  comments     Comment[]
  likes        Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  inventories  Inventory[]
}

model Inventory {
  id            String    @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  version       Int       @default(1) // For optimistic locking

  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  categoryId    Int
  category      Category  @relation(fields: [categoryId], references: [id])

  // Custom Field Definitions (as suggested)
  string1_name  String?
  string1_show  Boolean   @default(false)
  string2_name  String?
  string2_show  Boolean   @default(false)
  string3_name  String?
  string3_show  Boolean   @default(false)

  multiline1_name String?
  multiline1_show Boolean   @default(false)
  multiline2_name String?
  multiline2_show Boolean   @default(false)
  multiline3_name String?
  multiline3_show Boolean   @default(false)

  int1_name     String?
  int1_show     Boolean   @default(false)
  int2_name     String?
  int2_show     Boolean   @default(false)
  int3_name     String?
  int3_show     Boolean   @default(false)

  bool1_name    String?
  bool1_show    Boolean   @default(false)
  bool2_name    String?
  bool2_show    Boolean   @default(false)
  bool3_name    String?
  bool3_show    Boolean   @default(false)

  doc1_name     String?
  doc1_show     Boolean   @default(false)
  doc2_name     String?
  doc2_show     Boolean   @default(false)
  doc3_name     String?
  doc3_show     Boolean   @default(false)

  items         Item[]
  tags          InventoryTag[]
  permissions   AccessPermission[]
  comments      Comment[]
  customIdFormat Json? // Stores the array of ID elements
}

model Item {
  id            String    @id @default(cuid())
  customId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  version       Int       @default(1) // For optimistic locking
  name          String
  inventoryId   String
  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  
  // Custom Field Values
  string1_val   String?
  string2_val   String?
  string3_val   String?
  multiline1_val String?
  multiline2_val String?
  multiline3_val String?
  int1_val      Int?
  int2_val      Int?
  int3_val      Int?
  bool1_val     Boolean?
  bool2_val     Boolean?
  bool3_val     Boolean?
  doc1_val      String?
  doc2_val      String?
  doc3_val      String?

  likes         Like[]

  @@unique([inventoryId, customId]) // Enforces custom ID uniqueness per inventory
}

model Tag {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  inventories  InventoryTag[]
}

model InventoryTag {
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  tagId       Int
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([inventoryId, tagId])
}

// Model to grant specific users write access to an inventory
model AccessPermission {
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@id([userId, inventoryId])
}

// Model for the discussion/comment section on each inventory
model Comment {
  id          String    @id @default(cuid())
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
}

// Model for tracking likes on each item
model Like {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, itemId]) // Ensures a user can only like an item once
}